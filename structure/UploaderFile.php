<?php

namespace steroids\file\structure;

use steroids\core\behaviors\UidBehavior;
use steroids\file\exceptions\FileUserException;
use steroids\file\FileModule;
use yii\base\BaseObject;
use yii\helpers\ArrayHelper;
use yii\helpers\FileHelper;
use yii\helpers\StringHelper;

/**
 * Class UploaderFile
 * @property string $uid
 * @property-read string $title
 * @property-read string $savedFileName
 */
class UploaderFile extends BaseObject
{
    /**
     * File uid (generated by backend or frontend)
     * @var string|null
     */
    private ?string $_uid = null;

    /**
     * File name with extension
     * @var string
     */
    public string $name = '';

    /**
     * @var int
     */
    public $size;

    /**
     * File mime type
     * @var string
     */
    public ?string $mimeType = null;

    /**
     * @var UploaderContentRange
     */
    public ?UploaderContentRange $contentRange = null;

    /**
     * Absolute path to file (if exists locally) or stream
     * @var string|resource
     */
    public $source;

    /**
     * @var mixed
     */
    public $rawData;

    public function getUid()
    {
        if (!$this->_uid) {
            $this->_uid = UidBehavior::generate();
        }
        return $this->_uid;
    }

    public function setUid($value)
    {
        $this->_uid = $value;
    }

    /**
     * @return string|null
     */
    public function getTitle()
    {
        return $this->name ?: (is_string($this->source) ? StringHelper::basename($this->source) : $this->uid);
    }

    public function getSavedFileName()
    {
        $ext = $this->getExtensionBySource($this->source);

        if (!$ext) {
            throw new FileUserException(\Yii::t('steroids', 'Не удалось установить тип файла'));
        }

        return $this->uid . '.' . $ext;
    }

    /**
     * @param string|resource $source
     * @return string|bool
     * @throws FileUserException
     */
    protected function getExtensionBySource($source)
    {
        if (is_resource($source)) {
            $mimeType = mime_content_type($source);
            if (!$mimeType) {
                throw new FileUserException(\Yii::t('steroids', 'Не удалось установить тип файла'));
            }

            return $this->getExtentionByMimeType($mimeType);
        }

        if (filter_var($source, FILTER_VALIDATE_URL)) {
            $mimeType = $this->getMimeTypeByUrl($source);

            return $this->getExtentionByMimeType($mimeType);
        }

        if (is_string($source)) {
            return pathinfo($source, PATHINFO_EXTENSION);
        }

        return false;
    }

    /**
     * @param string $url
     * @return string
     * @throws FileUserException
     */
    public function getMimeTypeByUrl($url)
    {
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_exec($ch);

        $contentType = curl_getinfo($ch, CURLINFO_CONTENT_TYPE);

        if (!$contentType) {
            throw new FileUserException(\Yii::t('steroids', 'Не удолось получить content type'));
        }

        return $contentType;
    }

    /**
     * @param string $mimeType
     * @return string
     * @throws FileUserException
     */
    public function getExtentionByMimeType($mimeType)
    {
        $ext = ArrayHelper::getValue(FileModule::MIMETYPE_EXTENSION_MAP, $mimeType);

        if (!$ext) {
            $ext = ArrayHelper::getValue(FileHelper::getExtensionsByMimeType($mimeType), 0);
        }

        if (!$ext) {
            throw new FileUserException(\Yii::t('steroids', 'Не удалось установить тип файла'));
        }

        return $ext;
    }
}
